
diff --git a/src/server/game/Entities/Creature/GossipDef.cpp b/src/server/game/Entities/Creature/GossipDef.cpp
index 044c853..f53adc3 100644
-- a/src/server/game/Entities/Creature/GossipDef.cpp
++ b/src/server/game/Entities/Creature/GossipDef.cpp
@@ -23,6 +23,7 @@
#include "WorldPacket.h"
#include "WorldSession.h"
#include "Formulas.h"
#include "Grumboz_VIP_Core.h"

GossipMenu::GossipMenu()
{
@@ -383,7 +384,14 @@ void PlayerMenu::SendQuestGiverStatus(uint8 questStatus, ObjectGuid npcGUID) con

void PlayerMenu::SendQuestGiverQuestDetails(Quest const* quest, ObjectGuid npcGUID, bool activateAccept) const
{
    std::string questTitle      = quest->GetTitle();
	float VIP_OFFSET = VIP::GetVIPOFFSET();
	uint32 acctId = _session->GetAccountId();
	uint8 Pvip = VIP::GetVIP(acctId);
	float MOD = (Pvip * VIP_OFFSET);

	Player* player = _session->GetPlayer();

	std::string questTitle = quest->GetTitle();
    std::string questDetails    = quest->GetDetails();
    std::string questObjectives = quest->GetObjectives();
    std::string questEndText    = quest->GetEndText();
@@ -430,8 +438,11 @@ void PlayerMenu::SendQuestGiverQuestDetails(Quest const* quest, ObjectGuid npcGU
            if (!quest->RewardChoiceItemId[i])
                continue;

            data << uint32(quest->RewardChoiceItemId[i]);
            data << uint32(quest->RewardChoiceItemCount[i]);
			uint32 Item_Choice_Reward_Count = quest->RewardItemIdCount[i];
			uint32 extra_Item_Choice_Reward_Count = Item_Choice_Reward_Count + (Item_Choice_Reward_Count * MOD);
			
			data << uint32(quest->RewardChoiceItemId[i]);
			data << uint32(quest->RewardChoiceItemCount[i] + extra_Item_Choice_Reward_Count);

            if (ItemTemplate const* itemTemplate = sObjectMgr->GetItemTemplate(quest->RewardChoiceItemId[i]))
                data << uint32(itemTemplate->DisplayInfoID);
@@ -446,8 +457,11 @@ void PlayerMenu::SendQuestGiverQuestDetails(Quest const* quest, ObjectGuid npcGU
            if (!quest->RewardItemId[i])
                continue;

			uint32 Item_Reward_Count = quest->RewardItemIdCount[i];
			uint32 extra_Item_Reward_Count = Item_Reward_Count * MOD;

            data << uint32(quest->RewardItemId[i]);
            data << uint32(quest->RewardItemIdCount[i]);
			data << uint32(quest->RewardItemIdCount[i] + extra_Item_Reward_Count);

            if (ItemTemplate const* itemTemplate = sObjectMgr->GetItemTemplate(quest->RewardItemId[i]))
                data << uint32(itemTemplate->DisplayInfoID);
@@ -455,8 +469,15 @@ void PlayerMenu::SendQuestGiverQuestDetails(Quest const* quest, ObjectGuid npcGU
                data << uint32(0);
        }

        data << uint32(quest->GetRewOrReqMoney());
        data << uint32(quest->XPValue(_session->GetPlayer()) * sWorld->getRate(RATE_XP_QUEST));
		uint32 XP = quest->XPValue(player);
		float xp_rate = sWorld->getRate(RATE_XP_QUEST);
		uint32 MONEY = quest->GetRewOrReqMoney();

		uint32 extra_XP = XP * xp_rate + (xp_rate * MOD);
		uint32 extra_MONEY = MONEY + (MONEY * MOD);

		data << uint32(MONEY + extra_MONEY); //  + extra_MONEY
		data << uint32(XP + extra_XP); //  + extra_XP
    }

    // rewarded honor points. Multiply with 10 to satisfy client
@@ -497,7 +518,14 @@ void PlayerMenu::SendQuestQueryResponse(Quest const* quest) const
    std::string questEndText = quest->GetEndText();
    std::string questCompletedText = quest->GetCompletedText();

    std::string questObjectiveText[QUEST_OBJECTIVES_COUNT];
	float VIP_OFFSET = VIP::GetVIPOFFSET();
	uint32 acctId = _session->GetAccountId();
	uint8 Pvip = VIP::GetVIP(acctId);
	float MOD = (Pvip * VIP_OFFSET);

	Player* player = _session->GetPlayer();

	std::string questObjectiveText[QUEST_OBJECTIVES_COUNT];
    for (uint8 i = 0; i < QUEST_OBJECTIVES_COUNT; ++i)
        questObjectiveText[i] = quest->ObjectiveText[i];

@@ -537,10 +565,13 @@ void PlayerMenu::SendQuestQueryResponse(Quest const* quest) const
    data << uint32(quest->GetNextQuestInChain());           // client will request this quest from NPC, if not 0
    data << uint32(quest->GetXPId());                       // used for calculating rewarded experience

	uint32 MONEY = quest->GetRewOrReqMoney();
	uint32 extra_MONEY = MONEY * MOD;

    if (quest->HasFlag(QUEST_FLAGS_HIDDEN_REWARDS))
        data << uint32(0);                                  // Hide money rewarded
    else
        data << uint32(quest->GetRewOrReqMoney());          // reward money (below max lvl)
		data << uint32(MONEY + extra_MONEY);				// reward money (below max lvl)

    data << uint32(quest->GetRewMoneyMaxLevel());           // used in XP calculation at client
    data << uint32(quest->GetRewSpell());                   // reward spell, this spell will display (icon) (cast if RewSpellCast == 0)
@@ -569,12 +600,20 @@ void PlayerMenu::SendQuestQueryResponse(Quest const* quest) const
        for (uint8 i = 0; i < QUEST_REWARDS_COUNT; ++i)
        {
            data << uint32(quest->RewardItemId[i]);
            data << uint32(quest->RewardItemIdCount[i]);
        }

			uint32 Item_Reward_Count = quest->RewardItemIdCount[i];
			uint32 extra_Item_Reward_Count = Item_Reward_Count * MOD;

			data << uint32(quest->RewardItemIdCount[i] + extra_Item_Reward_Count);
		}
        for (uint8 i = 0; i < QUEST_REWARD_CHOICES_COUNT; ++i)
        {
            data << uint32(quest->RewardChoiceItemId[i]);
            data << uint32(quest->RewardChoiceItemCount[i]);

			uint32 Item_Choice_Reward_Count = quest->RewardItemIdCount[i];
			uint32 extra_Item_Choice_Reward_Count = Item_Choice_Reward_Count * MOD;

			data << uint32(quest->RewardChoiceItemCount[i] + extra_Item_Choice_Reward_Count);// data << uint32(quest->RewardChoiceItemCount[i]);
        }
    }

@@ -628,7 +667,14 @@ void PlayerMenu::SendQuestQueryResponse(Quest const* quest) const

void PlayerMenu::SendQuestGiverOfferReward(Quest const* quest, ObjectGuid npcGUID, bool enableNext) const
{
    std::string questTitle = quest->GetTitle();
	float VIP_OFFSET = VIP::GetVIPOFFSET();
	uint32 acctId = _session->GetAccountId();
	uint8 Pvip = VIP::GetVIP(acctId);
	float MOD = (Pvip * VIP_OFFSET);

	Player* player = _session->GetPlayer();

	std::string questTitle = quest->GetTitle();
    std::string questOfferRewardText = quest->GetOfferRewardText();

    int32 locale = _session->GetSessionDbLocaleIndex();
@@ -673,7 +719,11 @@ void PlayerMenu::SendQuestGiverOfferReward(Quest const* quest, ObjectGuid npcGUI
    for (uint32 i=0; i < quest->GetRewChoiceItemsCount(); ++i)
    {
        data << uint32(quest->RewardChoiceItemId[i]);
        data << uint32(quest->RewardChoiceItemCount[i]);

		uint32 Item_Choice_Reward_Count = quest->RewardItemIdCount[i];
		uint32 extra_Item_Choice_Reward_Count = Item_Choice_Reward_Count * MOD;

		data << uint32(quest->RewardChoiceItemCount[i] + extra_Item_Choice_Reward_Count);

        if (ItemTemplate const* itemTemplate = sObjectMgr->GetItemTemplate(quest->RewardChoiceItemId[i]))
            data << uint32(itemTemplate->DisplayInfoID);
@@ -685,7 +735,11 @@ void PlayerMenu::SendQuestGiverOfferReward(Quest const* quest, ObjectGuid npcGUI
    for (uint32 i = 0; i < quest->GetRewItemsCount(); ++i)
    {
        data << uint32(quest->RewardItemId[i]);
        data << uint32(quest->RewardItemIdCount[i]);

		uint32 Item_Reward_Count = quest->RewardItemIdCount[i];
		Item_Reward_Count = Item_Reward_Count + (Item_Reward_Count * MOD);

		data << uint32(quest->RewardItemIdCount[i] + Item_Reward_Count);

        if (ItemTemplate const* itemTemplate = sObjectMgr->GetItemTemplate(quest->RewardItemId[i]))
            data << uint32(itemTemplate->DisplayInfoID);
@@ -693,8 +747,15 @@ void PlayerMenu::SendQuestGiverOfferReward(Quest const* quest, ObjectGuid npcGUI
            data << uint32(0);
    }

    data << uint32(quest->GetRewOrReqMoney());
    data << uint32(quest->XPValue(_session->GetPlayer()) * sWorld->getRate(RATE_XP_QUEST));
	uint32 XP = quest->XPValue(player);
	float xp_rate = sWorld->getRate(RATE_XP_QUEST);
	uint32 MONEY = quest->GetRewOrReqMoney();

	uint32 extra_XP = XP * xp_rate + (xp_rate * MOD);
	uint32 extra_MONEY = MONEY + (MONEY * MOD);

	data << uint32(MONEY + extra_MONEY);
	data << uint32(XP + extra_XP);

    // rewarded honor points. Multiply with 10 to satisfy client
    data << uint32(10 * quest->CalculateHonorGain(_session->GetPlayer()->GetQuestLevel(quest)));
